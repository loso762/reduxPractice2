{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiSliceActions } from \"./ui-slice\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          totalPrice: newItem.price,\n          quantity: 1,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n      state.totalQuantity++;\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n      state.totalQuantity--;\n    }\n  }\n});\nconst sendCartData = cartData => {\n  return async dispatch => {\n    dispatch(uiSliceActions.shownotification({\n      status: \"pending\",\n      title: \"sending..\",\n      message: \"sending cart data!\"\n    }));\n    const response = await fetch(\"https://reduxproject-3fcae-default-rtdb.firebaseio.com/cart.json\", {\n      method: \"PUT\",\n      body: JSON.stringify(cart)\n    });\n    if (!response) {\n      throw new Error(\"오류\");\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiSliceActions","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","price","totalPrice","quantity","title","removeItem","filter","sendCartData","cartData","dispatch","shownotification","status","message","response","fetch","method","body","JSON","stringify","cart","Error","cartActions","actions"],"sources":["/Users/kihun/Desktop/연습/reduxPractice2/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiSliceActions } from \"./ui-slice\";\n\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0,\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          totalPrice: newItem.price,\n          quantity: 1,\n          name: newItem.title,\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n      state.totalQuantity++;\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n      state.totalQuantity--;\n    },\n  },\n});\n\nconst sendCartData = (cartData) => {\n  return async (dispatch) => {\n    dispatch(\n      uiSliceActions.shownotification({\n        status: \"pending\",\n        title: \"sending..\",\n        message: \"sending cart data!\",\n      })\n    );\n\n    const response = await fetch(\n      \"https://reduxproject-3fcae-default-rtdb.firebaseio.com/cart.json\",\n      {\n        method: \"PUT\",\n        body: JSON.stringify(cart),\n      }\n    );\n\n    if (!response) {\n      throw new Error(\"오류\");\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,YAAY;AAE3C,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC5BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEL,gBAAgB;EAC9BM,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAK,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAEvE,IAAI,CAACH,YAAY,EAAE;QACjBJ,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UACfD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,UAAU,EAAER,OAAO,CAACO,KAAK;UACzBE,QAAQ,EAAE,CAAC;UACXf,IAAI,EAAEM,OAAO,CAACU;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLR,YAAY,CAACO,QAAQ,GAAGP,YAAY,CAACO,QAAQ,GAAG,CAAC;QACjDP,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACM,UAAU,GAAGR,OAAO,CAACO,KAAK;MACnE;MACAT,KAAK,CAACN,aAAa,EAAE;IACvB,CAAC;IAEDmB,UAAUA,CAACb,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAK,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAE/D,IAAIH,YAAY,CAACO,QAAQ,KAAK,CAAC,EAAE;QAC/BX,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACqB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACLH,YAAY,CAACO,QAAQ,EAAE;QACvBP,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACM,UAAU,GAAGN,YAAY,CAACK,KAAK;MACxE;MACAT,KAAK,CAACN,aAAa,EAAE;IACvB;EACF;AACF,CAAC,CAAC;AAEF,MAAMqB,YAAY,GAAIC,QAAQ,IAAK;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CACN1B,cAAc,CAAC2B,gBAAgB,CAAC;MAC9BC,MAAM,EAAE,SAAS;MACjBP,KAAK,EAAE,WAAW;MAClBQ,OAAO,EAAE;IACX,CAAC,CAAC,CACH;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAAkE,EAClE;MACEC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,IAAI;IAC3B,CAAC,CACF;IAED,IAAI,CAACN,QAAQ,EAAE;MACb,MAAM,IAAIO,KAAK,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGlC,SAAS,CAACmC,OAAO;AAE5C,eAAenC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}